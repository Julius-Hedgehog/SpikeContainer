//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpikeContainer.DataEntitiy
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestMesDbEntities : DbContext
    {
        public TestMesDbEntities()
            : base("name=TestMesDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArelContainers> ArelContainers { get; set; }
        public virtual DbSet<ArelLots> ArelLots { get; set; }
        public virtual DbSet<ArelLotsRecipe> ArelLotsRecipe { get; set; }
        public virtual DbSet<DhPlanDet> DhPlanDet { get; set; }
        public virtual DbSet<DhPlanMstr> DhPlanMstr { get; set; }
        public virtual DbSet<LocalVariables> LocalVariables { get; set; }
        public virtual DbSet<Locations> Locations { get; set; }
        public virtual DbSet<Machines> Machines { get; set; }
        public virtual DbSet<MenuItems> MenuItems { get; set; }
        public virtual DbSet<Packages> Packages { get; set; }
        public virtual DbSet<Permissions> Permissions { get; set; }
        public virtual DbSet<PkgHist> PkgHist { get; set; }
        public virtual DbSet<Pro2SQL> Pro2SQL { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SysSequences> SysSequences { get; set; }
        public virtual DbSet<SystemParams> SystemParams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Warehouses> Warehouses { get; set; }
        public virtual DbSet<WoConsuptionSteps> WoConsuptionSteps { get; set; }
        public virtual DbSet<WorkOrders> WorkOrders { get; set; }
        public virtual DbSet<Bins> Bins { get; set; }
        public virtual DbSet<AvailableGreige> AvailableGreige { get; set; }
        public virtual DbSet<AvailableToPick> AvailableToPick { get; set; }
        public virtual DbSet<PickedGreige> PickedGreige { get; set; }
        public virtual DbSet<WorkOrderToRelease> WorkOrderToRelease { get; set; }
        public virtual DbSet<WorkOrderTotals> WorkOrderTotals { get; set; }
    
        [DbFunction("TestMesDbEntities", "fn_GetDyeLotBatches")]
        public virtual IQueryable<fn_GetDyeLotBatches_Result> fn_GetDyeLotBatches(string dyeLot, Nullable<int> machineNo, Nullable<int> arelKey)
        {
            var dyeLotParameter = dyeLot != null ?
                new ObjectParameter("DyeLot", dyeLot) :
                new ObjectParameter("DyeLot", typeof(string));
    
            var machineNoParameter = machineNo.HasValue ?
                new ObjectParameter("MachineNo", machineNo) :
                new ObjectParameter("MachineNo", typeof(int));
    
            var arelKeyParameter = arelKey.HasValue ?
                new ObjectParameter("ArelKey", arelKey) :
                new ObjectParameter("ArelKey", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetDyeLotBatches_Result>("[TestMesDbEntities].[fn_GetDyeLotBatches](@DyeLot, @MachineNo, @ArelKey)", dyeLotParameter, machineNoParameter, arelKeyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_DyeLotStarted(string dyeLot, Nullable<int> machineNo)
        {
            var dyeLotParameter = dyeLot != null ?
                new ObjectParameter("DyeLot", dyeLot) :
                new ObjectParameter("DyeLot", typeof(string));
    
            var machineNoParameter = machineNo.HasValue ?
                new ObjectParameter("MachineNo", machineNo) :
                new ObjectParameter("MachineNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_DyeLotStarted", dyeLotParameter, machineNoParameter);
        }
    
        public virtual int sp_InsertPkgHist(string where, string transDescr, Nullable<System.DateTime> transDateTime, string overRideUser)
        {
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            var transDescrParameter = transDescr != null ?
                new ObjectParameter("TransDescr", transDescr) :
                new ObjectParameter("TransDescr", typeof(string));
    
            var transDateTimeParameter = transDateTime.HasValue ?
                new ObjectParameter("TransDateTime", transDateTime) :
                new ObjectParameter("TransDateTime", typeof(System.DateTime));
    
            var overRideUserParameter = overRideUser != null ?
                new ObjectParameter("OverRideUser", overRideUser) :
                new ObjectParameter("OverRideUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertPkgHist", whereParameter, transDescrParameter, transDateTimeParameter, overRideUserParameter);
        }
    
        public virtual int sp_IssueToShopOrderPkg(Nullable<int> wO, Nullable<System.DateTime> dT, string userID)
        {
            var wOParameter = wO.HasValue ?
                new ObjectParameter("WO", wO) :
                new ObjectParameter("WO", typeof(int));
    
            var dTParameter = dT.HasValue ?
                new ObjectParameter("DT", dT) :
                new ObjectParameter("DT", typeof(System.DateTime));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IssueToShopOrderPkg", wOParameter, dTParameter, userIDParameter);
        }
    
        public virtual int sp_QcRelease(Nullable<int> sO, string user, string status)
        {
            var sOParameter = sO.HasValue ?
                new ObjectParameter("SO", sO) :
                new ObjectParameter("SO", typeof(int));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_QcRelease", sOParameter, userParameter, statusParameter);
        }
    
        [DbFunction("TestMesDbEntities", "fn_GetBinCount")]
        public virtual IQueryable<fn_GetBinCount_Result> fn_GetBinCount(Nullable<int> wo)
        {
            var woParameter = wo.HasValue ?
                new ObjectParameter("wo", wo) :
                new ObjectParameter("wo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetBinCount_Result>("[TestMesDbEntities].[fn_GetBinCount](@wo)", woParameter);
        }
    
        [DbFunction("TestMesDbEntities", "fn_GetRouter")]
        public virtual IQueryable<fn_GetRouter_Result> fn_GetRouter(Nullable<int> workOrder)
        {
            var workOrderParameter = workOrder.HasValue ?
                new ObjectParameter("WorkOrder", workOrder) :
                new ObjectParameter("WorkOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetRouter_Result>("[TestMesDbEntities].[fn_GetRouter](@WorkOrder)", workOrderParameter);
        }
    
        [DbFunction("TestMesDbEntities", "fn_IsGreige_2")]
        public virtual IQueryable<fn_IsGreige_2_Result> fn_IsGreige_2(string item)
        {
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_IsGreige_2_Result>("[TestMesDbEntities].[fn_IsGreige_2](@Item)", itemParameter);
        }
    
        [DbFunction("TestMesDbEntities", "fn_OpInfo")]
        public virtual IQueryable<fn_OpInfo_Result> fn_OpInfo(Nullable<int> workOrder, Nullable<int> opStepNo, string opDescr)
        {
            var workOrderParameter = workOrder.HasValue ?
                new ObjectParameter("WorkOrder", workOrder) :
                new ObjectParameter("WorkOrder", typeof(int));
    
            var opStepNoParameter = opStepNo.HasValue ?
                new ObjectParameter("OpStepNo", opStepNo) :
                new ObjectParameter("OpStepNo", typeof(int));
    
            var opDescrParameter = opDescr != null ?
                new ObjectParameter("OpDescr", opDescr) :
                new ObjectParameter("OpDescr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_OpInfo_Result>("[TestMesDbEntities].[fn_OpInfo](@WorkOrder, @OpStepNo, @OpDescr)", workOrderParameter, opStepNoParameter, opDescrParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_NextSeqNo(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_NextSeqNo", prefixParameter);
        }
    
        public virtual int sp_PostMesOp(Nullable<int> workOrder, Nullable<int> opStepNo, string mach, string user, string super, Nullable<System.DateTime> dt)
        {
            var workOrderParameter = workOrder.HasValue ?
                new ObjectParameter("WorkOrder", workOrder) :
                new ObjectParameter("WorkOrder", typeof(int));
    
            var opStepNoParameter = opStepNo.HasValue ?
                new ObjectParameter("OpStepNo", opStepNo) :
                new ObjectParameter("OpStepNo", typeof(int));
    
            var machParameter = mach != null ?
                new ObjectParameter("Mach", mach) :
                new ObjectParameter("Mach", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var superParameter = super != null ?
                new ObjectParameter("Super", super) :
                new ObjectParameter("Super", typeof(string));
    
            var dtParameter = dt.HasValue ?
                new ObjectParameter("Dt", dt) :
                new ObjectParameter("Dt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PostMesOp", workOrderParameter, opStepNoParameter, machParameter, userParameter, superParameter, dtParameter);
        }
    }
}
